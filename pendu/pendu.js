// Generated by CoffeeScript 2.7.0
(async function() {
  var askConfirm, create_keyboard, generate_new_word, guess, new_word, reveal, reveal_word, showAlert, sleep, update_labels;

  state({
    gamesCounter: 0,
    revealedWord: "",
    failsCounter: 0,
    hiddenWord: "",
    keyboardKeys: []
  });

  // --------------------------------------
  askConfirm = function(title, icon, message) {
    return Swal.fire({
      title: title,
      html: message,
      icon: icon,
      showCancelButton: true,
      confirmButtonText: 'Oui',
      cancelButtonText: 'Non',
      focusCancel: true,
      position: 'top',
      customClass: {
        popup: 'custom-popup-position'
      }
    });
  };

  
  // --------------------------------------
  showAlert = function(title, icon, align, message) {
    return Swal.fire({
      title: title,
      html: `<div style='text-align: ${align};'>${message}</div>`,
      icon: icon,
      confirmButtonText: 'OK',
      position: 'top',
      customClass: {
        popup: 'custom-popup-position'
      }
    });
  };

  // --------------------------------------
  sleep = function(ms) {
    return new Promise(function(resolve) {
      return setTimeout(resolve, ms);
    });
  };

  // --------------------------------------
  update_labels = function() {
    var labels, prefix, topList;
    topList = document.getElementById('top-list');
    prefix = '<li><kbd style="font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;';
    labels = `${prefix}Partie no: ${state.gamesCounter}</kbd></li>`;
    labels += `${prefix}Mot caché: ${state.revealedWord}</kbd></li>`;
    labels += `${prefix}&nbsp;&nbsp;&nbsp;Échecs: ${state.failsCounter}</kbd></li>`;
    labels += "<li>&nbsp;</li>";
    return topList.innerHTML = labels;
  };

  // --------------------------------------
  create_keyboard = function() {
    var createKey, footer, i, j, keyboard, len, len1, letter, results, row, rowDiv, rows;
    footer = document.getElementById('footer');
    // Create keyboard container
    keyboard = document.createElement('div');
    keyboard.style.marginTop = '10px';
    footer.appendChild(keyboard);
    // Define rows of alphabet keys
    rows = [['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'], ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'], ['z', 'x', 'c', 'v', 'b', 'n', 'm'], ['Au sujet', 'Nouveau mot', 'Révéler mot']];
    // Function to create a key button
    createKey = function(letter) {
      var btn;
      btn = document.createElement('button');
      btn.textContent = letter.toUpperCase();
      btn.style.margin = '2px';
      btn.style.padding = '5px 14px';
      btn.style.fontSize = '16px';
      btn.style.cursor = 'pointer';
      //~ btn.style.backgroundColor = any color here
      if (letter.length === 1) {
        state.keyboardKeys.push(btn); // record each key reference
      }
      btn.onclick = function() {
        switch (letter) {
          case "Au sujet":
            return (async function() {
              return (await showAlert("Au sujet de Pendu", "", "left", AIDE));
            })();
          case "Nouveau mot":
            return new_word();
          case "Révéler mot":
            return reveal_word();
          default:
            btn.disabled = true;
            return guess(letter);
        }
      };
      return btn;
    };
// Generate keys row-wise
    results = [];
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      rowDiv = document.createElement('div');
      rowDiv.style.marginBottom = '5px';
      for (j = 0, len1 = row.length; j < len1; j++) {
        letter = row[j];
        rowDiv.appendChild(createKey(letter));
      }
      results.push(keyboard.appendChild(rowDiv));
    }
    return results;
  };

  // ----------------------------------------------------------------------
  reveal = function(letter) {
    var ch, collator, i, index, len, ref, revealed;
    collator = new Intl.Collator('fr', {
      sensitivity: 'base'
    });
    revealed = state.revealedWord.split('');
    ref = state.hiddenWord;
    for (index = i = 0, len = ref.length; i < len; index = ++i) {
      ch = ref[index];
      if (collator.compare(ch, letter) === 0) {
        revealed[index] = state.hiddenWord[index];
      }
    }
    state.revealedWord = revealed.join('');
    return update_labels();
  };

  // --------------------------------------
  guess = async function(letter) {
    var beforeReveal, i, image_file, j, key, len, len1, ref, ref1;
    beforeReveal = state.revealedWord;
    reveal(letter);
    if (state.revealedWord === beforeReveal) {
      state.failsCounter++;
      update_labels();
      image_file = `pendu/pendu_${state.failsCounter}.png`;
      document.getElementById('theImage').src = image_file;
    }
    if (state.failsCounter === 10) {
      state.revealedWord = state.hiddenWord;
      update_labels();
      ref = state.keyboardKeys;
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        key.disabled = true;
      }
      await sleep(250);
      return (async function() {
        return (await showAlert("Hélas!", "info", "center", `Vous avez  perdu.<br><br>Le mot caché était: ${state.hiddenWord}`));
      })();
    } else if (state.revealedWord === state.hiddenWord) {
      ref1 = state.keyboardKeys;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        key = ref1[j];
        key.disabled = true;
      }
      await sleep(250);
      return (async function() {
        return (await showAlert("Bravo!", "info", "center", "Vous avez gagné."));
      })();
    }
  };

  // --------------------------------------
  reveal_word = function() {
    if (state.revealedWord === state.hiddenWord) {
      return (async function() {
        return (await showAlert("Info", "", "center", "Le mot caché est déjà révélé."));
      })();
    } else {
      return (async function() {
        var i, key, len, ref, result;
        result = (await askConfirm("Attention", "question", "Révéler le mot caché terminera cette partie.<br><br>Êtes-vous certain?"));
        if (result.isConfirmed) {
          ref = state.keyboardKeys;
          for (i = 0, len = ref.length; i < len; i++) {
            key = ref[i];
            // disable all alphabetic virtual keys
            key.disabled = true;
          }
          state.revealedWord = state.hiddenWord;
          return update_labels();
        }
      })();
    }
  };

  // --------------------------------------
  generate_new_word = function() {
    var i, key, len, ref;
    // pick a random word from words[] array defined in pendu_mots.js file
    state.hiddenWord = WORDS[Math.floor(Math.random() * WORDS.length)].toLowerCase();
    state.revealedWord = "*".repeat(state.hiddenWord.length);
    reveal("(");
    reveal(")");
    reveal("-");
    state.gamesCounter++;
    state.failsCounter = 0;
    ref = state.keyboardKeys;
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      // enable all alphabetic virtual keys
      key.disabled = false;
    }
    (async function() {
      return (await showAlert(`Partie no: ${state.gamesCounter}`, "", "center", `Mot caché de ${state.hiddenWord.length} lettres.`));
    })();
    document.getElementById('theImage').src = "pendu/pendu_0.png";
    return update_labels();
  };

  // --------------------------------------
  new_word = function() {
    if (state.revealedWord === state.hiddenWord) {
      return generate_new_word();
    } else {
      return (async function() {
        var result;
        result = (await askConfirm("Attention", "question", "Êtes-vous certain de commencer avec un nouveau mot?"));
        if (result.isConfirmed) {
          return generate_new_word();
        }
      })();
    }
  };

  // --------------------- start game ----------------------
  update_labels();

  document.getElementById('theImage').src = "pendu/pendu_splash.png";

  create_keyboard();

  await sleep(1000);

  new_word();

}).call(this);
